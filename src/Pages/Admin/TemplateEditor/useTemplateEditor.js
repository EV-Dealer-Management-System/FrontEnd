import { useState, useEffect } from 'react';
import { App } from 'antd';
import { TemplateEditorService } from '../../../App/Admin/TemplateEditor';

export const useTemplateEditor = () => {
  const { message } = App.useApp();
  
  // States c∆° b·∫£n
  const [templates, setTemplates] = useState([]);
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [htmlContent, setHtmlContent] = useState('');
  const [originalContent, setOriginalContent] = useState('');
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  // HTML parsing states - gom t·ª´ useHtmlParser
  const [allStyles, setAllStyles] = useState('');
  const [htmlHead, setHtmlHead] = useState('');
  const [htmlAttributes, setHtmlAttributes] = useState('');

  // ‚úÖ Parse HTML t·ª´ BE - t√°ch T·∫§T C·∫¢ STYLE (g·ªôp t·ª´ useHtmlParser.js)
  const parseHtmlFromBE = (rawHtml) => {
    console.log('=== PARSING TEMPLATE HTML FROM BE ===');
    console.log('Raw HTML length:', rawHtml?.length || 0);
    
    if (!rawHtml) return { bodyContent: '', allStyles: '', htmlHead: '', htmlAttributes: '' };
    
    // ‚úÖ T√°ch T·∫§T C·∫¢ <style> tags (c·∫£ trong <head> v√† <body>)
    const allStyleMatches = rawHtml.match(/<style[\s\S]*?<\/style>/gi);
    const allStyles = allStyleMatches ? allStyleMatches.join('\n') : '';
    
    // ‚úÖ T√°ch <head> content (KH√îNG bao g·ªìm <style> ƒë√£ t√°ch)
    let headMatch = rawHtml.match(/<head[^>]*>([\s\S]*?)<\/head>/i);
    let htmlHead = '';
    if (headMatch) {
      htmlHead = headMatch[1]
        .replace(/<style[\s\S]*?<\/style>/gi, '') // X√≥a style ƒë√£ t√°ch
        .replace(/<title[\s\S]*?<\/title>/gi, '') // X√≥a title ƒë·ªÉ tr√°nh tr√πng
        .trim();
    }
    
    // ‚úÖ T√°ch html attributes
    const htmlMatch = rawHtml.match(/<html([^>]*)>/i);
    const htmlAttributes = htmlMatch ? htmlMatch[1] : ' lang="vi"';
    
    // ‚úÖ T√°ch body content v√† LO·∫†I B·ªé t·∫•t c·∫£ <style> r·∫£i r√°c
    let bodyMatch = rawHtml.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
    let bodyContent = bodyMatch ? bodyMatch[1] : rawHtml;
    
    // Lo·∫°i b·ªè t·∫•t c·∫£ <style> r·∫£i r√°c trong body content
    bodyContent = bodyContent.replace(/<style[\s\S]*?<\/style>/gi, '');
    
    console.log('Parsed template results:');
    console.log('- All styles length:', allStyles.length);
    console.log('- Style blocks found:', allStyleMatches?.length || 0);
    console.log('- Head content length:', htmlHead.length);
    console.log('- HTML attributes:', htmlAttributes);
    console.log('- Body content length (after removing styles):', bodyContent.length);
    
    return { bodyContent, allStyles, htmlHead, htmlAttributes };
  };

  // ‚úÖ Rebuild HTML ƒë·∫ßy ƒë·ªß khi save - BAO G·ªíM T·∫§T C·∫¢ STYLE (g·ªôp t·ª´ useHtmlParser.js)
  const rebuildCompleteHtml = (bodyContent, templateName) => {
    console.log('=== REBUILDING COMPLETE TEMPLATE HTML ===');
    console.log('Body content length:', bodyContent?.length || 0);
    console.log('All styles length:', allStyles?.length || 0);
    console.log('HTML head length:', htmlHead?.length || 0);
    
    const finalHtml = `<!doctype html>
<html${htmlAttributes}>
<head>
<meta charset="utf-8" />
<title>${templateName || 'Template H·ª£p ƒë·ªìng'}</title>
${htmlHead}
${allStyles}
</head>
<body>
${bodyContent}
</body>
</html>`;

    console.log('Final template HTML length:', finalHtml.length);
    console.log('Styles included in rebuild:', !!allStyles);
    return finalHtml;
  };

  // ‚úÖ Fetch all templates - s·ª≠ d·ª•ng service t·ª´ TemplateEditor.js
  const fetchTemplates = async () => {
    setLoading(true);
    try {
      const result = await TemplateEditorService.getAllTemplates(1, 10);
      
      if (result.success) {
        setTemplates(result.data);
        console.log('‚úÖ Templates loaded via service:', result.data.length);
        message.success(result.message);
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error('‚ùå Error fetching templates via service:', error);
      message.error(error.message || 'L·ªói khi t·∫£i danh s√°ch template');
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ Load template content v√† parse HTML structure
  const loadTemplate = (template) => {
    console.log('üìã Loading template:', template.code, template.name);
    
    setSelectedTemplate(template);
    
    // ‚úÖ Parse HTML t·ª´ BE - t√°ch T·∫§T C·∫¢ style v√† structure
    const rawHtml = template.contentHtml || '';
    const parsedResult = parseHtmlFromBE(rawHtml);
    
    // L∆∞u structure v√†o state
    setAllStyles(parsedResult.allStyles);
    setHtmlHead(parsedResult.htmlHead);
    setHtmlAttributes(parsedResult.htmlAttributes);
    
    // Ch·ªâ hi·ªÉn th·ªã body content trong Quill (ƒë√£ lo·∫°i b·ªè style r·∫£i r√°c)
    setHtmlContent(parsedResult.bodyContent);
    setOriginalContent(parsedResult.bodyContent);
    setHasUnsavedChanges(false);
    
    console.log('‚úÖ Template loaded v√† parsed successfully');
    console.log('- Body content length:', parsedResult.bodyContent.length);
    console.log('- All styles length:', parsedResult.allStyles.length);
    console.log('- Styles preserved:', !!parsedResult.allStyles);
    
    message.success(`ƒê√£ t·∫£i template: ${template.name}`);
  };

  // ‚úÖ Save template - s·ª≠ d·ª•ng service t·ª´ TemplateEditor.js
  const saveTemplate = async () => {
    if (!selectedTemplate) {
      message.error('Ch∆∞a ch·ªçn template ƒë·ªÉ l∆∞u');
      return false;
    }

    if (!htmlContent.trim()) {
      message.error('N·ªôi dung template kh√¥ng ƒë∆∞·ª£c r·ªóng');
      return false;
    }

    setSaving(true);

    try {
      console.log('üíæ Saving template via service:', selectedTemplate.code);
      
      // ‚úÖ Rebuild HTML ƒë·∫ßy ƒë·ªß v·ªõi T·∫§T C·∫¢ styles preserved
      const completeHtml = rebuildCompleteHtml(htmlContent, selectedTemplate.name);
      
      // ‚úÖ Validate content tr∆∞·ªõc khi save
      const validation = TemplateEditorService.validateTemplateContent(completeHtml);
      if (!validation.isValid) {
        message.error(`Validation failed: ${validation.errors.join(', ')}`);
        return false;
      }
      
      if (validation.warnings.length > 0) {
        console.warn('Template validation warnings:', validation.warnings);
      }

      // ‚úÖ G·ªçi service ƒë·ªÉ update template
      const result = await TemplateEditorService.updateTemplate(
        selectedTemplate.code,
        selectedTemplate.name,
        completeHtml
      );

      if (result.success) {
        console.log('‚úÖ Template saved successfully via service');
        message.success(result.message);
        
        setOriginalContent(htmlContent);
        setHasUnsavedChanges(false);
        
        // ‚úÖ Update template in list v·ªõi HTML m·ªõi
        setTemplates(prev => 
          prev.map(t => 
            t.code === selectedTemplate.code 
              ? { ...t, contentHtml: completeHtml }
              : t
          )
        );
        
        // ‚úÖ Update selected template
        setSelectedTemplate(prev => ({
          ...prev,
          contentHtml: completeHtml
        }));

        return true;
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error('‚ùå Error saving template via service:', error);
      message.error(error.message || 'L·ªói khi l∆∞u template');
      return false;
    } finally {
      setSaving(false);
    }
  };

  // ‚úÖ Reset to original content
  const resetTemplate = () => {
    if (!selectedTemplate) {
      message.error('Ch∆∞a ch·ªçn template ƒë·ªÉ reset');
      return;
    }

    console.log('üîÑ Resetting template to original content');
    setHtmlContent(originalContent);
    setHasUnsavedChanges(false);
    message.success('ƒê√£ kh√¥i ph·ª•c n·ªôi dung g·ªëc');
  };

  // ‚úÖ Update content v√† track changes
  const updateContent = (newContent) => {
    setHtmlContent(newContent);
    setHasUnsavedChanges(newContent !== originalContent);
  };

  // ‚úÖ Reset all states
  const resetAllStates = () => {
    setSelectedTemplate(null);
    setHtmlContent('');
    setOriginalContent('');
    setHasUnsavedChanges(false);
    setAllStyles('');
    setHtmlHead('');
    setHtmlAttributes('');
  };

  // ‚úÖ Load templates on mount
  useEffect(() => {
    fetchTemplates();
  }, []);

  return {
    // States
    templates,
    selectedTemplate,
    htmlContent,
    originalContent,
    loading,
    saving,
    hasUnsavedChanges,
    allStyles,
    htmlHead,
    htmlAttributes,
    
    // Actions
    fetchTemplates,
    loadTemplate,
    saveTemplate,
    resetTemplate,
    updateContent,
    resetAllStates,
    rebuildCompleteHtml
  };
};
