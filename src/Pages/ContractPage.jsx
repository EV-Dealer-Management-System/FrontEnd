import React, { useState, useEffect, useRef } from 'react';
import { 
  Card, 
  Form, 
  Input, 
  Button, 
  message, 
  Row, 
  Col, 
  Typography, 
  Spin, 
  Modal, 
  Alert,
  Space,
  Divider,
  Badge,
  Steps,
  Tag,
  Radio,
  Upload,
  Select,
  Tabs,
  Image
} from 'antd';
import { 
  FileTextOutlined, 
  SafetyOutlined, 
  EditOutlined, 
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  FilePdfOutlined,
  UserOutlined,
  PhoneOutlined,
  MailOutlined,
  IdcardOutlined,
  PictureOutlined,
  UploadOutlined,
  CheckOutlined,
  ReloadOutlined,
  ClearOutlined
} from '@ant-design/icons';
import SignatureCanvas from 'react-signature-canvas';
import { ContractService } from '../App/Home/Contract';

const { Title, Text, Paragraph } = Typography;
const { Step } = Steps;

function ContractPage() {
  const [form] = Form.useForm();
  const contractService = ContractService();
  
  // States
  const [loading, setLoading] = useState(false);
  const [contractInfo, setContractInfo] = useState(null);
  const [smartCAInfo, setSmartCAInfo] = useState(null);
  const [pdfModalVisible, setPdfModalVisible] = useState(false);
  const [smartCAModalVisible, setSmartCAModalVisible] = useState(false);
  const [signingLoading, setSigningLoading] = useState(false);
  const [addingSmartCA, setAddingSmartCA] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [pdfBlob, setPdfBlob] = useState(null);
  const [pdfLoading, setPdfLoading] = useState(false);
  
  // Signature states
  const [showSignatureModal, setShowSignatureModal] = useState(false);
  const [showAppVerifyModal, setShowAppVerifyModal] = useState(false);
  const [signatureCompleted, setSignatureCompleted] = useState(false);
  const [contractSigned, setContractSigned] = useState(false);
  const [signatureDisplayMode, setSignatureDisplayMode] = useState(2);
  const [signatureMethod, setSignatureMethod] = useState('draw');
  const [uploadedImage, setUploadedImage] = useState(null);
  const [uploadedImageBase64, setUploadedImageBase64] = useState('');
  const signatureRef = useRef(null);

  // SignatureCanvas s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o t·ª± ƒë·ªông qua ref

  // L·∫•y th√¥ng tin h·ª£p ƒë·ªìng b·∫±ng processCode
  const getContractInfo = async (processCode) => {
    try {
      setLoading(true);
      
      const result = await contractService.handleGetContractInfo(processCode);
      
      if (result.success) {
        console.log('Contract info received:', {
          processId: result.data.processId,
          downloadUrl: result.data.downloadUrl,
          processedByUserId: result.data.processedByUserId,
          fullData: result.data
        });
        
        setContractInfo(result.data);
        setCurrentStep(1);
        
        // Ki·ªÉm tra SmartCA sau khi c√≥ th√¥ng tin h·ª£p ƒë·ªìng
        await checkSmartCA(result.data.processedByUserId);
        
        message.success('L·∫•y th√¥ng tin h·ª£p ƒë·ªìng th√†nh c√¥ng!');
      } else {
        message.error(result.error);
      }
    } catch (error) {
      console.error('Error in getContractInfo:', error);
      message.error('C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin h·ª£p ƒë·ªìng.');
    } finally {
      setLoading(false);
    }
  };

  // Ki·ªÉm tra th√¥ng tin SmartCA
  const checkSmartCA = async (userId) => {
    try {
      const result = await contractService.handleCheckSmartCA(userId);
      
      if (result.success) {
        // S·ª≠ d·ª•ng d·ªØ li·ªáu g·ªëc thay v√¨ format ƒë·ªÉ tr√°nh m·∫•t th√¥ng tin
        const finalData = result.data;
        setSmartCAInfo(finalData);
        
        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá
        const isValid = contractService.isSmartCAValid(finalData);
        
        console.log('CheckSmartCA result:', {
          original: result.data,
          finalData: finalData,
          isValid: isValid,
          hasDefaultSmartCa: !!finalData?.defaultSmartCa,
          defaultSmartCaValid: finalData?.defaultSmartCa?.isValid,
          certificatesCount: finalData?.userCertificates?.length || 0,
          validCertificates: finalData?.userCertificates?.filter(cert => cert.isValid).length || 0
        });
        
        if (!isValid) {
          setCurrentStep(2);
          message.warning('T√†i kho·∫£n ch∆∞a c√≥ SmartCA h·ª£p l·ªá. Vui l√≤ng th√™m SmartCA ƒë·ªÉ ti·∫øp t·ª•c.');
        } else {
          setCurrentStep(3);
          message.success('‚úÖ SmartCA ƒë√£ s·∫µn s√†ng ƒë·ªÉ k√Ω h·ª£p ƒë·ªìng!');
        }
      } else {
        message.error(result.error);
        setCurrentStep(2); // V·ªÅ b∆∞·ªõc th√™m SmartCA n·∫øu c√≥ l·ªói
      }
    } catch (error) {
      console.error('Error in checkSmartCA:', error);
      message.error('C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra SmartCA.');
      setCurrentStep(2);
    }
  };

  // Th√™m SmartCA
  const addSmartCA = async (values) => {
    try {
      setAddingSmartCA(true);
      
      const result = await contractService.handleAddSmartCA({
        userId: contractInfo.processedByUserId,
        userName: values.cccd,
        serialNumber: values.serialNumber,
        accessToken: contractInfo.accessToken
      });
      
      console.log('Add SmartCA result:', result);
      
      if (result.success) {
        console.log('Add SmartCA success, result data:', result.data);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        message.success(result.message);
        setSmartCAModalVisible(false);
        
        // C·∫≠p nh·∫≠t smartCAInfo v·ªõi d·ªØ li·ªáu m·ªõi t·ª´ API response
        setSmartCAInfo(result.data);
        
        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá b·∫±ng contractService
        const isValid = contractService.isSmartCAValid(result.data);
        console.log('SmartCA validity after add:', isValid);
        
        if (isValid) {
          // N·∫øu SmartCA h·ª£p l·ªá, chuy·ªÉn sang b∆∞·ªõc k√Ω
          setCurrentStep(3);
          message.success('üéâ SmartCA ƒë√£ s·∫µn s√†ng! B·∫°n c√≥ th·ªÉ k√Ω h·ª£p ƒë·ªìng ngay b√¢y gi·ªù.', 4);
        } else {
          // N·∫øu ch∆∞a h·ª£p l·ªá, v·∫´n ·ªü b∆∞·ªõc 2 v√† refresh sau
          setCurrentStep(2);
          message.warning('SmartCA ƒë√£ ƒë∆∞·ª£c th√™m nh∆∞ng ch∆∞a s·∫µn s√†ng. ƒêang ki·ªÉm tra l·∫°i...', 3);
          
          // Refresh l·∫°i th√¥ng tin sau 3 gi√¢y
          setTimeout(async () => {
            console.log('Refreshing SmartCA info after delay...');
            await checkSmartCA(contractInfo.processedByUserId);
          }, 3000);
        }
        
      } else {
        // Hi·ªÉn th·ªã l·ªói c·ª• th·ªÉ t·ª´ API
        const errorMessage = result.error || 'Th√™m SmartCA th·∫•t b·∫°i';
        message.error(errorMessage);
        
        // Log chi ti·∫øt ƒë·ªÉ debug
        console.error('Add SmartCA failed:', {
          error: result.error,
          fullResult: result
        });
      }
    } catch (error) {
      console.error('Exception in addSmartCA:', error);
      message.error('C√≥ l·ªói kh√¥ng mong mu·ªën khi th√™m SmartCA.');
    } finally {
      setAddingSmartCA(false);
    }
  };

  // B·∫Øt ƒë·∫ßu quy tr√¨nh k√Ω h·ª£p ƒë·ªìng (m·ªü signature modal)
  const signContract = async () => {
    if (!contractService.isSmartCAValid(smartCAInfo)) {
      message.error('SmartCA ch∆∞a s·∫µn s√†ng. Vui l√≤ng th√™m SmartCA tr∆∞·ªõc khi k√Ω!');
      return;
    }
    
    setShowSignatureModal(true);
  };

  // K√Ω h·ª£p ƒë·ªìng ƒëi·ªán t·ª≠ (Step 1)
  const handleDigitalSignature = async () => {
    // Ki·ªÉm tra ch·ªØ k√Ω d·ª±a tr√™n method v√† display mode
    if (signatureDisplayMode === 2) {
      if (signatureMethod === 'draw') {
        if (!signatureRef.current || signatureRef.current.isEmpty()) {
          message.error('Vui l√≤ng v·∫Ω ch·ªØ k√Ω c·ªßa b·∫°n!');
          return;
        }
      } else if (signatureMethod === 'upload') {
        if (!uploadedImageBase64) {
          message.error('Vui l√≤ng t·∫£i l√™n ·∫£nh ch·ªØ k√Ω ho·∫∑c logo!');
          return;
        }
      }
    } else if (signatureDisplayMode === 3) {
      // Ki·ªÉm tra c·∫£ ·∫£nh upload v√† ch·ªØ k√Ω v·∫Ω tay cho ch·∫ø ƒë·ªô k·∫øt h·ª£p
      if (!uploadedImageBase64) {
        message.error('Vui l√≤ng t·∫£i l√™n ·∫£nh ƒë·ªÉ k·∫øt h·ª£p v·ªõi ch·ªØ k√Ω!');
        return;
      }
      if (!signatureRef.current || signatureRef.current.isEmpty()) {
        message.error('Vui l√≤ng v·∫Ω ch·ªØ k√Ω ƒë·ªÉ k·∫øt h·ª£p v·ªõi ·∫£nh!');
        return;
      }
    }

    setSigningLoading(true);
    setShowSignatureModal(false);
    
    try {
      // L·∫•y signature data
      let signatureDataURL = '';
      try {
        const signatureData = getSignatureData();
        
        if (signatureDisplayMode === 3 && signatureData instanceof Promise) {
          console.log('Processing combined signature...');
          signatureDataURL = await signatureData;
          console.log('Combined signature completed:', signatureDataURL ? 'Success' : 'Failed');
        } else {
          signatureDataURL = signatureData;
        }
        
        if (!signatureDataURL) {
          message.error('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch·ªØ k√Ω. Vui l√≤ng th·ª≠ l·∫°i!');
          setSigningLoading(false);
          return;
        }
      } catch (error) {
        console.error('Error getting signature data:', error);
        message.error(`L·ªói x·ª≠ l√Ω ch·ªØ k√Ω: ${error.message}`);
        setSigningLoading(false);
        return;
      }
      
      // G·ªçi API k√Ω ƒëi·ªán t·ª≠
      const result = await contractService.handleDigitalSignature({
        processId: contractInfo.processId,
        reason: "K√Ω h·ª£p ƒë·ªìng ƒëi·ªán t·ª≠",
        signatureImage: signatureDataURL,
        signatureDisplayMode: signatureDisplayMode,
        waitingProcess: contractInfo.waitingProcess || { id: contractInfo.processId }
      });
      
      console.log('Digital signature result:', result);
      
      if (result.success) {
        setSignatureCompleted(true);
        setShowAppVerifyModal(true);
        message.success('K√Ω ƒëi·ªán t·ª≠ th√†nh c√¥ng! Vui l√≤ng x√°c th·ª±c.');
      } else {
        message.error(result.error);
      }
    } catch (error) {
      console.error('Error in digital signature:', error);
      message.error('C√≥ l·ªói kh√¥ng mong mu·ªën khi k√Ω ƒëi·ªán t·ª≠');
    } finally {
      setSigningLoading(false);
    }
  };

  // X√°c th·ª±c ·ª©ng d·ª•ng (Step 2)
  const handleAppVerification = async () => {
    if (!signatureCompleted) {
      message.error('Vui l√≤ng ho√†n th√†nh k√Ω ƒëi·ªán t·ª≠ tr∆∞·ªõc!');
      return;
    }

    setSigningLoading(true);
    try {
      const result = await contractService.handleAppVerification({
        processId: contractInfo.processId
      });
      
      if (result.success) {
        setShowAppVerifyModal(false);
        setContractSigned(true);
        setCurrentStep(4);
        
        // Hi·ªÉn th·ªã popup th√†nh c√¥ng
        Modal.success({
          title: (
            <span className="text-green-600 font-semibold flex items-center">
              <CheckCircleOutlined className="mr-2" />
              K√Ω H·ª£p ƒê·ªìng Ho√†n T·∫•t!
            </span>
          ),
          content: (
            <div className="py-4">
              <div className="text-base mb-3">üéâ H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c k√Ω v√† x√°c th·ª±c th√†nh c√¥ng!</div>
              <div className="text-sm text-gray-600">
                Process ID: <strong>{contractInfo.processId?.substring(0, 8)}...</strong>
              </div>
              <div className="text-sm text-gray-600">
                Tr·∫°ng th√°i: <strong className="text-green-600">ƒê√£ k√Ω v√† x√°c th·ª±c ‚úÖ</strong>
              </div>
            </div>
          ),
          okText: 'ƒê√≥ng',
          centered: true,
          width: 450,
          okButtonProps: {
            className: 'bg-green-500 border-green-500 hover:bg-green-600'
          }
        });
        
        message.success('X√°c th·ª±c th√†nh c√¥ng! H·ª£p ƒë·ªìng ƒë√£ ho√†n t·∫•t.');
      } else {
        message.error(result.error);
      }
    } catch (error) {
      console.error('Error in app verification:', error);
      message.error('C√≥ l·ªói khi x√°c th·ª±c t·ª´ ·ª©ng d·ª•ng');
    } finally {
      setSigningLoading(false);
    }
  };

  // T·∫£i PDF preview
  const loadPDFPreview = async () => {
    if (!contractInfo?.downloadUrl) return;
    
    setPdfLoading(true);
    try {
      console.log('Loading PDF preview for URL:', contractInfo.downloadUrl);
      
      // Th·ª≠ s·ª≠ d·ª•ng downloadUrl tr·ª±c ti·∫øp tr∆∞·ªõc
      setPdfBlob(contractInfo.downloadUrl);
      
      // N·∫øu mu·ªën th·ª≠ preview API, uncomment ƒëo·∫°n code d∆∞·ªõi
      /*
      // L·∫•y token t·ª´ downloadUrl
      const urlParams = new URLSearchParams(contractInfo.downloadUrl.split('?')[1]);
      const token = urlParams.get('token');
      
      if (token) {
        const result = await contractService.handleGetPreviewPDF(token);
        
        if (result.success) {
          setPdfBlob(result.url);
        } else {
          console.warn('Preview API failed, using downloadUrl directly');
          setPdfBlob(contractInfo.downloadUrl);
        }
      } else {
        // N·∫øu kh√¥ng c√≥ token, s·ª≠ d·ª•ng downloadUrl tr·ª±c ti·∫øp
        setPdfBlob(contractInfo.downloadUrl);
      }
      */
      
    } catch (error) {
      console.error('Error loading PDF:', error);
      // Fallback: s·ª≠ d·ª•ng downloadUrl tr·ª±c ti·∫øp
      setPdfBlob(contractInfo.downloadUrl);
      message.warning('S·ª≠ d·ª•ng link PDF g·ªëc do kh√¥ng th·ªÉ t·∫£i preview');
    } finally {
      setPdfLoading(false);
    }
  };

  // Submit form processCode
  const onFinish = async (values) => {
    await getContractInfo(values.processCode);
  };

  // Reset form v√† tr·∫°ng th√°i
  const resetForm = () => {
    form.resetFields();
    setContractInfo(null);
    setSmartCAInfo(null);
    setCurrentStep(0);
    setPdfBlob(null);
    setPdfLoading(false);
    setSignatureCompleted(false);
    setContractSigned(false);
    setShowSignatureModal(false);
    setShowAppVerifyModal(false);
    clearAllSignatureData();
  };

  // Utility functions cho signature handling
  
  // Function x·ª≠ l√Ω upload ·∫£nh
  const handleImageUpload = (info) => {
    if (info.file.status === 'uploading') {
      return;
    }
    if (info.file.status === 'done' || info.file.status === 'error') {
      // L·∫•y file g·ªëc
      const file = info.file.originFileObj || info.file;
      
      // ƒê·ªçc file th√†nh base64
      const reader = new FileReader();
      reader.onload = () => {
        setUploadedImageBase64(reader.result);
        setUploadedImage(file);
        message.success('T·∫£i ·∫£nh th√†nh c√¥ng!');
      };
      reader.readAsDataURL(file);
    }
  };

  // Function ki·ªÉm tra file upload
  const beforeUpload = (file) => {
    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';
    if (!isJpgOrPng) {
      message.error('B·∫°n ch·ªâ c√≥ th·ªÉ t·∫£i l√™n file JPG/PNG!');
      return false;
    }
    
    const isLt5M = file.size / 1024 / 1024 < 5;
    if (!isLt5M) {
      message.error('K√≠ch th∆∞·ªõc ·∫£nh ph·∫£i nh·ªè h∆°n 5MB!');
      return false;
    }
    
    return true;
  };

  // Function k·∫øt h·ª£p ·∫£nh upload v√† ch·ªØ k√Ω v·∫Ω tay th√†nh m·ªôt ·∫£nh
  const getCombinedSignatureData = () => {
    if (!uploadedImageBase64 || !signatureRef.current || signatureRef.current.isEmpty()) {
      return null;
    }

    return new Promise((resolve, reject) => {
      try {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        const uploadedImg = document.createElement('img');
        uploadedImg.onload = () => {
          try {
            const signatureDataURL = getSignatureAsFullDataURL();
            if (!signatureDataURL) {
              reject(new Error('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu ch·ªØ k√Ω'));
              return;
            }
            
            const signatureImg = document.createElement('img');
            
            signatureImg.onload = () => {
              try {
                const padding = 20;
                const maxWidth = Math.max(uploadedImg.width, signatureImg.width);
                const totalHeight = uploadedImg.height + signatureImg.height + padding;
                
                canvas.width = maxWidth;
                canvas.height = totalHeight;
                
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                const uploadX = (maxWidth - uploadedImg.width) / 2;
                ctx.drawImage(uploadedImg, uploadX, 0, uploadedImg.width, uploadedImg.height);
                
                const signatureX = (maxWidth - signatureImg.width) / 2;
                const signatureY = uploadedImg.height + padding;
                ctx.drawImage(signatureImg, signatureX, signatureY, signatureImg.width, signatureImg.height);
                
                const combinedDataURL = canvas.toDataURL('image/png', 1.0);
                resolve(combinedDataURL);
              } catch (error) {
                reject(error);
              }
            };
            
            signatureImg.onerror = () => reject(new Error('Kh√¥ng th·ªÉ load ·∫£nh ch·ªØ k√Ω'));
            signatureImg.src = signatureDataURL;
          } catch (error) {
            reject(error);
          }
        };
        
        uploadedImg.onerror = () => reject(new Error('Kh√¥ng th·ªÉ load ·∫£nh upload'));
        
        if (!uploadedImageBase64.startsWith('data:image/')) {
          reject(new Error('ƒê·ªãnh d·∫°ng ·∫£nh upload kh√¥ng h·ª£p l·ªá'));
          return;
        }
        
        uploadedImg.src = uploadedImageBase64;
      } catch (error) {
        reject(error);
      }
    });
  };

  // Function l·∫•y signature data t·ª´ method ƒë∆∞·ª£c ch·ªçn
  const getSignatureData = () => {
    if (signatureDisplayMode === 3) {
      return getCombinedSignatureData();
    } else if (signatureMethod === 'upload') {
      return uploadedImageBase64;
    } else {
      return getSignatureAsFullDataURL();
    }
  };

  // Helper function ƒë·ªÉ chuy·ªÉn ƒë·ªïi signature th√†nh PNG base64 v·ªõi format ƒë·∫ßy ƒë·ªß
  const getSignatureAsFullDataURL = () => {
    if (!signatureRef.current || signatureRef.current.isEmpty()) {
      return null;
    }
    
    try {
      // S·ª≠ d·ª•ng method toDataURL tr·ª±c ti·∫øp thay v√¨ getTrimmedCanvas
      return signatureRef.current.toDataURL('image/png');
    } catch (error) {
      console.error('Error getting signature data:', error);
      return null;
    }
  };

  // Clear ch·ªØ k√Ω
  const clearSignature = () => {
    if (signatureRef.current) {
      signatureRef.current.clear();
    }
  };

  // Clear uploaded image
  const clearUploadedImage = () => {
    setUploadedImage(null);
    setUploadedImageBase64('');
  };

  // Clear t·∫•t c·∫£ signature data
  const clearAllSignatureData = () => {
    clearSignature();
    clearUploadedImage();
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <Title level={2} className="flex items-center justify-center mb-2">
            <SafetyOutlined className="text-blue-500 mr-3" />
            K√Ω H·ª£p ƒê·ªìng ƒêi·ªán T·ª≠
          </Title>
          <Text className="text-gray-600">
            Nh·∫≠p m√£ process ƒë·ªÉ xem v√† k√Ω h·ª£p ƒë·ªìng m·ªôt c√°ch an to√†n
          </Text>
        </div>

        {/* Steps Progress */}
        <Card className="mb-6">
          <Steps current={currentStep} className="mb-4">
            <Step title="Nh·∫≠p m√£ process" icon={<FileTextOutlined />} />
            <Step title="Xem h·ª£p ƒë·ªìng" icon={<FilePdfOutlined />} />
            <Step title="Ki·ªÉm tra SmartCA" icon={<SafetyOutlined />} />
            <Step title="K√Ω h·ª£p ƒë·ªìng" icon={<EditOutlined />} />
            <Step title="Ho√†n th√†nh" icon={<CheckCircleOutlined />} />
          </Steps>
        </Card>

        {/* Form nh·∫≠p processCode */}
        {currentStep === 0 && (
          <Card 
            title={
              <span className="flex items-center">
                <FileTextOutlined className="text-blue-500 mr-2" />
                Nh·∫≠p M√£ Process
              </span>
            }
            className="mb-6"
          >
            <Form
              form={form}
              layout="vertical"
              onFinish={onFinish}
              autoComplete="off"
            >
              <Row gutter={[16, 16]}>
                <Col xs={24} md={18}>
                  <Form.Item
                    name="processCode"
                    label="M√£ Process"
                    rules={[
                      { required: true, message: 'Vui l√≤ng nh·∫≠p m√£ process!' },
                      { 
                        validator: (_, value) => {
                          if (!value) return Promise.resolve();
                          const validation = contractService.validateProcessCode(value);
                          return validation.valid ? Promise.resolve() : Promise.reject(new Error(validation.message));
                        }
                      }
                    ]}
                  >
                    <Input
                      placeholder="Nh·∫≠p m√£ process (v√≠ d·ª•: 550702)"
                      size="large"
                      prefix={<FileTextOutlined className="text-gray-400" />}
                    />
                  </Form.Item>
                </Col>
                <Col xs={24} md={6}>
                  <Form.Item label=" " className="mb-0">
                    <Button
                      type="primary"
                      htmlType="submit"
                      loading={loading}
                      size="large"
                      className="w-full bg-blue-500 hover:bg-blue-600"
                    >
                      L·∫•y th√¥ng tin
                    </Button>
                  </Form.Item>
                </Col>
              </Row>
            </Form>
          </Card>
        )}

        {/* Hi·ªÉn th·ªã th√¥ng tin h·ª£p ƒë·ªìng */}
        {contractInfo && (
          <Row gutter={[16, 16]} className="mb-6">
            {/* Th√¥ng tin h·ª£p ƒë·ªìng */}
            <Col xs={24} lg={12}>
              <Card
                title={
                  <span className="flex items-center">
                    <FilePdfOutlined className="text-red-500 mr-2" />
                    Th√¥ng Tin H·ª£p ƒê·ªìng
                  </span>
                }
                extra={
                  <Button onClick={resetForm} size="small" icon={<ReloadOutlined />}>
                    Nh·∫≠p m√£ kh√°c
                  </Button>
                }
              >
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <Text strong>Process ID:</Text>
                    <Text className="text-gray-600 font-mono text-sm">
                      {contractInfo.processId?.substring(0, 8)}...
                    </Text>
                  </div>
                  <div className="flex justify-between">
                    <Text strong>User ID:</Text>
                    <Text className="text-gray-600">{contractInfo.processedByUserId}</Text>
                  </div>
                  <div className="flex justify-between">
                    <Text strong>Tr·∫°ng th√°i:</Text>
                    <Tag color="green">S·∫µn s√†ng</Tag>
                  </div>
                  
                  <Divider className="my-3" />
                  
                  <Space className="w-full flex-wrap">
                    <Button
                      type="primary"
                      icon={<FilePdfOutlined />}
                      loading={pdfLoading}
                      onClick={() => {
                        loadPDFPreview();
                        setPdfModalVisible(true);
                      }}
                      className="bg-red-500 hover:bg-red-600 border-red-500"
                    >
                      {pdfLoading ? 'ƒêang t·∫£i...' : 'Xem PDF'}
                    </Button>
                    <Button
                      href={contractInfo.downloadUrl}
                      target="_blank"
                      icon={<FilePdfOutlined />}
                    >
                      T·∫£i xu·ªëng
                    </Button>
                  </Space>
                </div>
              </Card>
            </Col>

            {/* Th√¥ng tin SmartCA */}
            <Col xs={24} lg={12}>
              <SmartCACard 
                smartCAInfo={smartCAInfo}
                contractService={contractService}
                onAddSmartCA={() => setSmartCAModalVisible(true)}
                onSign={signContract}
                signingLoading={signingLoading}
              />
            </Col>
          </Row>
        )}

        {/* K·∫øt qu·∫£ sau khi k√Ω */}
        {currentStep === 4 && (
          <Card className="mb-6">
            <div className="text-center py-8">
              <CheckCircleOutlined className="text-6xl text-green-500 mb-4" />
              <Title level={3} className="text-green-600 mb-2">
                K√Ω H·ª£p ƒê·ªìng Th√†nh C√¥ng!
              </Title>
              <Paragraph className="text-gray-600 mb-6">
                H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c k√Ω th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng b·∫£n h·ª£p ƒë·ªìng ƒë√£ k√Ω.
              </Paragraph>
              <Space>
                <Button 
                  type="primary" 
                  size="large"
                  href={contractInfo?.downloadUrl}
                  target="_blank"
                  icon={<FilePdfOutlined />}
                  className="bg-green-500 hover:bg-green-600 border-green-500"
                >
                  T·∫£i h·ª£p ƒë·ªìng ƒë√£ k√Ω
                </Button>
                <Button size="large" onClick={resetForm}>
                  K√Ω h·ª£p ƒë·ªìng m·ªõi
                </Button>
              </Space>
            </div>
          </Card>
        )}

        {/* PDF Modal */}
        <PDFModal
          visible={pdfModalVisible}
          onCancel={() => setPdfModalVisible(false)}
          contractInfo={contractInfo}
          pdfBlob={pdfBlob}
        />

        {/* SmartCA Modal */}
        <SmartCAModal
          visible={smartCAModalVisible}
          onCancel={() => setSmartCAModalVisible(false)}
          onSubmit={addSmartCA}
          loading={addingSmartCA}
          contractService={contractService}
        />

        {/* Signature Modal */}
        <SignatureModal
          visible={showSignatureModal}
          onCancel={() => setShowSignatureModal(false)}
          onSubmit={handleDigitalSignature}
          loading={signingLoading}
          signatureDisplayMode={signatureDisplayMode}
          setSignatureDisplayMode={setSignatureDisplayMode}
          signatureMethod={signatureMethod}
          setSignatureMethod={setSignatureMethod}
          signatureRef={signatureRef}
          uploadedImage={uploadedImage}
          uploadedImageBase64={uploadedImageBase64}
          handleImageUpload={handleImageUpload}
          beforeUpload={beforeUpload}
          clearSignature={clearSignature}
          clearUploadedImage={clearUploadedImage}
          clearAllSignatureData={clearAllSignatureData}
        />

        {/* App Verification Modal */}
        <AppVerificationModal
          visible={showAppVerifyModal}
          onCancel={() => setShowAppVerifyModal(false)}
          onSubmit={handleAppVerification}
          loading={signingLoading}
        />
      </div>
    </div>
  );
}

// Component hi·ªÉn th·ªã th√¥ng tin SmartCA
const SmartCACard = ({ smartCAInfo, contractService, onAddSmartCA, onSign, signingLoading }) => {
  const isValid = contractService.isSmartCAValid(smartCAInfo);
  
  // Ki·ªÉm tra th√¥ng tin chi ti·∫øt SmartCA
  const hasDefaultSmartCA = smartCAInfo?.defaultSmartCa && smartCAInfo.defaultSmartCa.isValid;
  const validCertificates = smartCAInfo?.userCertificates?.filter(cert => cert.isValid) || [];
  const totalCertificates = smartCAInfo?.userCertificates?.length || 0;
  
  return (
    <Card
      title={
        <span className="flex items-center">
          <SafetyOutlined className="text-green-500 mr-2" />
          Th√¥ng Tin SmartCA
        </span>
      }
    >
      {smartCAInfo ? (
        <div className="space-y-3">
          <div className="flex justify-between items-center">
            <Text strong>Tr·∫°ng th√°i:</Text>
            <Badge 
              status={isValid ? "success" : "error"}
              text={isValid ? "S·∫µn s√†ng k√Ω" : "Ch∆∞a s·∫µn s√†ng"}
            />
          </div>
          <div className="flex justify-between">
            <Text strong>T√™n:</Text>
            <Text>{smartCAInfo.name || 'N/A'}</Text>
          </div>
          <div className="flex justify-between">
            <Text strong>Email:</Text>
            <Text>{smartCAInfo.email || 'N/A'}</Text>
          </div>
          <div className="flex justify-between">
            <Text strong>S·ªë ƒëi·ªán tho·∫°i:</Text>
            <Text>{smartCAInfo.phone || 'N/A'}</Text>
          </div>
          <div className="flex justify-between">
            <Text strong>Ch·ª©ng ch·ªâ h·ª£p l·ªá:</Text>
            <Text className={validCertificates.length > 0 ? 'text-green-600 font-semibold' : 'text-red-500'}>
              {validCertificates.length}/{totalCertificates}
            </Text>
          </div>
          
          {/* Hi·ªÉn th·ªã th√¥ng tin SmartCA m·∫∑c ƒë·ªãnh n·∫øu c√≥ */}
          {hasDefaultSmartCA && (
            <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded">
              <div className="text-xs text-green-600 font-semibold mb-1">‚úÖ SmartCA M·∫∑c ƒê·ªãnh</div>
              <div className="text-sm">
                <div><strong>T√™n:</strong> {smartCAInfo.defaultSmartCa.name}</div>
                <div><strong>CCCD:</strong> {smartCAInfo.defaultSmartCa.uid}</div>
                <div><strong>H·∫øt h·∫°n:</strong> {new Date(smartCAInfo.defaultSmartCa.validTo).toLocaleDateString('vi-VN')}</div>
              </div>
            </div>
          )}
          
          {!isValid && (
            <div className="mt-4">
              <Alert
                message="SmartCA ch∆∞a s·∫µn s√†ng"
                description="B·∫°n c·∫ßn th√™m SmartCA ƒë·ªÉ c√≥ th·ªÉ k√Ω h·ª£p ƒë·ªìng"
                type="warning"
                showIcon
                className="mb-3"
              />
              <Button
                type="primary"
                danger
                icon={<SafetyOutlined />}
                onClick={onAddSmartCA}
                className="w-full"
              >
                Th√™m SmartCA
              </Button>
            </div>
          )}

          {isValid && (
            <div className="mt-4">
              <Alert
                message="SmartCA s·∫µn s√†ng"
                description="B·∫°n c√≥ th·ªÉ k√Ω h·ª£p ƒë·ªìng ngay b√¢y gi·ªù"
                type="success"
                showIcon
                className="mb-3"
              />
              <Button
                type="primary"
                size="large"
                loading={signingLoading}
                onClick={onSign}
                className="w-full bg-green-500 hover:bg-green-600 border-green-500"
                icon={<EditOutlined />}
              >
                {signingLoading ? 'ƒêang k√Ω...' : 'K√Ω H·ª£p ƒê·ªìng'}
              </Button>
            </div>
          )}
        </div>
      ) : (
        <div className="text-center py-8">
          <Spin />
          <p className="mt-2 text-gray-500">ƒêang ki·ªÉm tra SmartCA...</p>
        </div>
      )}
    </Card>
  );
};

// Component modal ch·ªØ k√Ω ƒëi·ªán t·ª≠ - Gi·ªëng y h·ªát CreateAccount.jsx
const SignatureModal = ({ 
  visible, 
  onCancel, 
  onSubmit, 
  loading,
  signatureDisplayMode,
  setSignatureDisplayMode,
  signatureMethod,
  setSignatureMethod,
  signatureRef,
  uploadedImage,
  uploadedImageBase64,
  handleImageUpload,
  beforeUpload,
  clearSignature,
  clearUploadedImage,
  clearAllSignatureData
}) => {
  return (
    <Modal
      title={
        <span style={{ display: 'flex', alignItems: 'center' }}>
          <EditOutlined style={{ color: '#1890ff', marginRight: '8px' }} />
          K√Ω H·ª£p ƒê·ªìng ƒêi·ªán T·ª≠
        </span>
      }
      open={visible}
      onCancel={onCancel}
      footer={null}
      width={600}
      centered
    >
      <div style={{ textAlign: 'center', padding: '20px 0' }}>
        <Alert
          message="B∆∞·ªõc 1/2: Vui l√≤ng th·ª±c hi·ªán k√Ω ƒëi·ªán t·ª≠ tr∆∞·ªõc"
          type="info"
          style={{ marginBottom: '20px' }}
        />
        
        {/* T√πy ch·ªçn lo·∫°i ch·ªØ k√Ω */}
        <div style={{ marginBottom: '20px', textAlign: 'left' }}>
          <Text strong style={{ marginBottom: '8px', display: 'block' }}>Ch·ªçn lo·∫°i ch·ªØ k√Ω:</Text>
          <Radio.Group 
            value={signatureDisplayMode} 
            onChange={(e) => setSignatureDisplayMode(e.target.value)}
            style={{ width: '100%' }}
          >
            <Space direction="vertical" style={{ width: '100%' }}>
              <Radio value={2}>
                <span style={{ fontWeight: '500' }}>VƒÉn b·∫£n ho·∫∑c h√¨nh ·∫£nh</span>
                <div style={{ fontSize: '12px', color: '#666', marginLeft: '24px' }}>
                  Hi·ªÉn th·ªã vƒÉn b·∫£n ho·∫∑c h√¨nh ·∫£nh ch·ªØ k√Ω b·∫°n v·∫Ω
                </div>
              </Radio>
              <Radio value={3}>
                <span style={{ fontWeight: '500' }}>K·∫øt h·ª£p ·∫£nh v√† ch·ªØ k√Ω</span>
                <div style={{ fontSize: '12px', color: '#666', marginLeft: '24px' }}>
                  K·∫øt h·ª£p ·∫£nh upload (tr√™n) v√† ch·ªØ k√Ω v·∫Ω tay (d∆∞·ªõi) th√†nh m·ªôt
                </div>
              </Radio>
            </Space>
          </Radio.Group>
        </div>
        
        {/* Tabs cho vi·ªác v·∫Ω ch·ªØ k√Ω ho·∫∑c upload ·∫£nh - ch·ªâ hi·ªÉn th·ªã khi c·∫ßn h√¨nh ·∫£nh */}
        {signatureDisplayMode === 2 && (
          <div style={{ marginBottom: '20px' }}>
            <Tabs 
              activeKey={signatureMethod} 
              onChange={setSignatureMethod}
              items={[
                {
                  key: 'draw',
                  label: (
                    <span>
                      <EditOutlined />
                      V·∫Ω Ch·ªØ K√Ω
                    </span>
                  ),
                  children: (
                    <div style={{
                      border: '2px dashed #d9d9d9',
                      borderRadius: '8px',
                      padding: '10px',
                      backgroundColor: '#fafafa'
                    }}>
                      <SignatureCanvas
                        ref={signatureRef}
                        canvasProps={{
                          width: 500,
                          height: 200,
                          className: 'signature-canvas',
                          style: {
                            border: '1px solid #d9d9d9',
                            borderRadius: '4px',
                            backgroundColor: 'white'
                          }
                        }}
                        backgroundColor="white"
                        penColor="black"
                        dotSize={2}
                        minWidth={1}
                        maxWidth={3}
                        velocityFilterWeight={0.7}
                      />
                      <div style={{ 
                        fontSize: '12px', 
                        color: '#666', 
                        marginTop: '8px',
                        textAlign: 'center'
                      }}>
                        V·∫Ω ch·ªØ k√Ω c·ªßa b·∫°n trong khung tr√™n
                      </div>
                    </div>
                  )
                },
                {
                  key: 'upload',
                  label: (
                    <span>
                      <UploadOutlined />
                      Upload ·∫¢nh
                    </span>
                  ),
                  children: (
                    <div style={{
                      border: '2px dashed #d9d9d9',
                      borderRadius: '8px',
                      padding: '20px',
                      backgroundColor: '#fafafa',
                      textAlign: 'center',
                      minHeight: '200px',
                      display: 'flex',
                      flexDirection: 'column',
                      justifyContent: 'center',
                      alignItems: 'center'
                    }}>
                      {!uploadedImageBase64 ? (
                        <Upload.Dragger
                          name="signature"
                          multiple={false}
                          onChange={handleImageUpload}
                          beforeUpload={beforeUpload}
                          showUploadList={false}
                          customRequest={({ onSuccess }) => {
                            // Fake upload success to prevent HTTP request
                            setTimeout(() => {
                              onSuccess();
                            }, 0);
                          }}
                          style={{
                            width: '100%',
                            border: 'none',
                            backgroundColor: 'transparent'
                          }}
                        >
                          <p className="ant-upload-drag-icon">
                            <PictureOutlined style={{ fontSize: '48px', color: '#1890ff' }} />
                          </p>
                          <p className="ant-upload-text" style={{ fontSize: '16px', fontWeight: '500' }}>
                            K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c click ƒë·ªÉ ch·ªçn
                          </p>
                          <p className="ant-upload-hint" style={{ color: '#666' }}>
                            H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, PNG, GIF. T·ªëi ƒëa 5MB
                          </p>
                        </Upload.Dragger>
                      ) : (
                        <div style={{ width: '100%' }}>
                          <div style={{ marginBottom: '16px' }}>
                            <Image
                              src={uploadedImageBase64}
                              alt="Signature Preview"
                              style={{ 
                                maxWidth: '300px', 
                                maxHeight: '150px',
                                border: '1px solid #d9d9d9',
                                borderRadius: '4px'
                              }}
                            />
                          </div>
                          <Button 
                            icon={<ClearOutlined />}
                            onClick={clearUploadedImage}
                            type="dashed"
                          >
                            X√≥a ·∫£nh v√† ch·ªçn l·∫°i
                          </Button>
                        </div>
                      )}
                    </div>
                  )
                }
              ]}
            />
          </div>
        )}
        
        {/* Giao di·ªán cho ch·∫ø ƒë·ªô k·∫øt h·ª£p ·∫£nh v√† ch·ªØ k√Ω */}
        {signatureDisplayMode === 3 && (
          <div style={{ marginBottom: '20px' }}>
            <Alert
              message="Ch·∫ø ƒë·ªô k·∫øt h·ª£p: Vui l√≤ng cung c·∫•p c·∫£ ·∫£nh v√† ch·ªØ k√Ω"
              type="warning"
              style={{ marginBottom: '16px' }}
            />
            
            {/* Upload ·∫£nh */}
            <div style={{ marginBottom: '16px' }}>
              <Text strong style={{ display: 'block', marginBottom: '8px' }}>1. T·∫£i l√™n ·∫£nh (s·∫Ω hi·ªÉn th·ªã ·ªü tr√™n):</Text>
              <div style={{
                border: '2px dashed #d9d9d9',
                borderRadius: '8px',
                padding: '16px',
                backgroundColor: '#fafafa',
                textAlign: 'center'
              }}>
                {!uploadedImageBase64 ? (
                  <Upload.Dragger
                    name="signature"
                    multiple={false}
                    onChange={handleImageUpload}
                    beforeUpload={beforeUpload}
                    showUploadList={false}
                    customRequest={({ onSuccess }) => {
                      setTimeout(() => {
                        onSuccess();
                      }, 0);
                    }}
                    style={{
                      border: 'none',
                      backgroundColor: 'transparent'
                    }}
                  >
                    <p className="ant-upload-drag-icon">
                      <PictureOutlined style={{ fontSize: '32px', color: '#1890ff' }} />
                    </p>
                    <p className="ant-upload-text">T·∫£i l√™n ·∫£nh logo/h√¨nh ·∫£nh</p>
                    <p className="ant-upload-hint">JPG, PNG, GIF - T·ªëi ƒëa 5MB</p>
                  </Upload.Dragger>
                ) : (
                  <div>
                    <Image
                      src={uploadedImageBase64}
                      alt="Logo Preview"
                      style={{ 
                        maxWidth: '200px', 
                        maxHeight: '100px',
                        border: '1px solid #d9d9d9',
                        borderRadius: '4px'
                      }}
                    />
                    <div style={{ marginTop: '8px' }}>
                      <Button 
                        icon={<ClearOutlined />}
                        onClick={clearUploadedImage}
                        size="small"
                        type="dashed"
                      >
                        Thay ƒë·ªïi ·∫£nh
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            {/* V·∫Ω ch·ªØ k√Ω */}
            <div>
              <Text strong style={{ display: 'block', marginBottom: '8px' }}>2. V·∫Ω ch·ªØ k√Ω (s·∫Ω hi·ªÉn th·ªã ·ªü d∆∞·ªõi):</Text>
              <div style={{
                border: '2px dashed #d9d9d9',
                borderRadius: '8px',
                padding: '10px',
                backgroundColor: '#fafafa'
              }}>
                <SignatureCanvas
                  ref={signatureRef}
                  canvasProps={{
                    width: 500,
                    height: 150,
                    className: 'signature-canvas',
                    style: {
                      border: '1px solid #d9d9d9',
                      borderRadius: '4px',
                      backgroundColor: 'white'
                    }
                  }}
                  backgroundColor="white"
                  penColor="black"
                  dotSize={2}
                  minWidth={1}
                  maxWidth={3}
                  velocityFilterWeight={0.7}
                />
                <div style={{ 
                  fontSize: '12px', 
                  color: '#666', 
                  marginTop: '8px',
                  textAlign: 'center'
                }}>
                  V·∫Ω ch·ªØ k√Ω c·ªßa b·∫°n trong khung tr√™n
                </div>
              </div>
            </div>
            
            {/* Preview k·∫øt h·ª£p n·∫øu c·∫£ hai ƒë·ªÅu c√≥ */}
            {uploadedImageBase64 && signatureRef.current && !signatureRef.current.isEmpty() && (
              <div style={{ marginTop: '16px', textAlign: 'center' }}>
                <Text style={{ fontSize: '12px', color: '#1890ff' }}>‚úÖ S·∫µn s√†ng k·∫øt h·ª£p: ·∫¢nh (tr√™n) + Ch·ªØ k√Ω (d∆∞·ªõi)</Text>
              </div>
            )}
          </div>
        )}
        
        <div style={{ 
          fontSize: '12px', 
          color: '#666', 
          marginBottom: '16px',
          textAlign: 'left'
        }}>
          <strong>L∆∞u √Ω:</strong> 
          {signatureDisplayMode === 3 
            ? ' ·∫¢nh v√† ch·ªØ k√Ω s·∫Ω ƒë∆∞·ª£c k·∫øt h·ª£p th√†nh m·ªôt ·∫£nh PNG base64'
            : signatureMethod === 'draw' 
              ? ' Ch·ªØ k√Ω v·∫Ω tay s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªãnh d·∫°ng PNG base64'
              : ' ·∫¢nh upload s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh ƒë·ªãnh d·∫°ng base64'
          } ƒë·ªÉ g·ª≠i l√™n server
        </div>

        <Space size="large">
          <Button
            icon={<ClearOutlined />}
            onClick={clearAllSignatureData}
            style={{ minWidth: '100px' }}
          >
            X√≥a t·∫•t c·∫£
          </Button>
          
          <Button
            onClick={onCancel}
            style={{ minWidth: '100px' }}
          >
            H·ªßy
          </Button>
          
          <Button
            type="primary"
            icon={<CheckOutlined />}
            onClick={onSubmit}
            loading={loading}
            style={{ 
              minWidth: '100px',
              backgroundColor: '#1890ff',
              borderColor: '#1890ff'
            }}
          >
            {loading ? 'ƒêang k√Ω...' : 'K√Ω ƒêi·ªán T·ª≠'}
          </Button>
        </Space>
      </div>
    </Modal>
  );
};

// Component modal x√°c th·ª±c ·ª©ng d·ª•ng
const AppVerificationModal = ({ 
  visible, 
  onCancel, 
  onSubmit, 
  loading 
}) => {
  return (
    <Modal
      title={
        <span className="flex items-center text-green-600">
          <CheckOutlined className="mr-2" />
          X√°c Th·ª±c ·ª®ng D·ª•ng
        </span>
      }
      open={visible}
      onCancel={onCancel}
      footer={[
        <Button key="cancel" onClick={onCancel}>
          H·ªßy
        </Button>,
        <Button 
          key="submit" 
          type="primary" 
          loading={loading}
          onClick={onSubmit}
          className="bg-green-500 border-green-500 hover:bg-green-600"
        >
          X√°c Th·ª±c Ho√†n T·∫•t
        </Button>
      ]}
      width={500}
      centered
    >
      <div className="text-center py-6">
        <CheckCircleOutlined className="text-6xl text-green-500 mb-4" />
        <Title level={4} className="mb-4">K√Ω ƒëi·ªán t·ª≠ th√†nh c√¥ng!</Title>
        <Paragraph className="text-gray-600 mb-6">
          Vui l√≤ng x√°c nh·∫≠n tr√™n ·ª©ng d·ª•ng di ƒë·ªông ƒë·ªÉ ho√†n t·∫•t quy tr√¨nh k√Ω h·ª£p ƒë·ªìng.
        </Paragraph>
        <Alert
          message="Ch·ªù x√°c th·ª±c"
          description="Ki·ªÉm tra ·ª©ng d·ª•ng di ƒë·ªông v√† th·ª±c hi·ªán x√°c th·ª±c ƒë·ªÉ ho√†n t·∫•t."
          type="info"
          showIcon
        />
      </div>
    </Modal>
  );
};

// Component modal PDF - S·ª≠ d·ª•ng Google Docs Viewer ƒë·ªÉ bypass X-Frame-Options
const PDFModal = ({ visible, onCancel, contractInfo, pdfBlob }) => {
  const [imageError, setImageError] = useState(false);
  const [pdfLoading, setPdfLoading] = useState(true);
  
  // Reset states khi modal m·ªü/ƒë√≥ng - HOOKS PH·∫¢I LU√îN ƒê∆Ø·ª¢C G·ªåI TR∆Ø·ªöC
  React.useEffect(() => {
    if (visible && contractInfo) {
      setPdfLoading(true);
      setImageError(false);
    }
  }, [visible, contractInfo]);

  // Early return AFTER hooks
  if (!contractInfo) return null;

  const contractLink = pdfBlob || contractInfo.downloadUrl;
  const contractNo = contractInfo.processId?.substring(0, 8) + '...' || 'H·ª£p ƒë·ªìng';
  
  // Ch·ªâ s·ª≠ d·ª•ng Google Docs Viewer ƒë·ªÉ tr√°nh l·ªói X-Frame-Options
  const viewerUrl = `https://docs.google.com/gview?url=${encodeURIComponent(contractLink)}&embedded=true`;

  return (
    <Modal
      title={
        <div className="flex items-center justify-between bg-gray-100 -mx-6 -mt-4 px-6 py-3 border-b">
          <span className="flex items-center">
            <FilePdfOutlined className="text-red-500 mr-2" />
            <span className="font-medium">{contractNo}</span>
          </span>
          <div className="flex items-center space-x-2">
            <span className="text-xs text-gray-600">Google Docs Viewer</span>
            {imageError && <span className="text-red-500 text-xs">‚ùå L·ªói t·∫£i</span>}
          </div>
        </div>
      }
      open={visible}
      onCancel={onCancel}
      footer={[
        <Button key="close" onClick={onCancel}>
          ƒê√≥ng
        </Button>,
        <Button 
          key="download" 
          type="primary" 
          icon={<FilePdfOutlined />}
          href={contractInfo.downloadUrl}
          target="_blank"
          className="bg-red-500 border-red-500 hover:bg-red-600"
        >
          T·∫£i xu·ªëng PDF
        </Button>
      ]}
      width="98vw"
      style={{ top: 10 }}
      styles={{
        body: { 
          height: 'calc(95vh - 120px)', 
          padding: '0',
          backgroundColor: '#525659'
        }
      }}
      destroyOnClose={false} // Kh√¥ng destroy ƒë·ªÉ tr√°nh l·ªói khi m·ªü l·∫°i
      forceRender={true} // Force render ƒë·ªÉ ƒë·∫£m b·∫£o content ƒë∆∞·ª£c t·∫°o
    >
      <div className="w-full h-full flex flex-col" style={{ backgroundColor: '#525659' }}>
        {/* PDF Display - Acrobat Style */}
        <div 
          className="flex-1 overflow-auto flex justify-center"
          style={{
            backgroundColor: '#525659',
            padding: '20px 0'
          }}
        >
          <div className="bg-white shadow-lg relative" style={{ maxWidth: '100%' }}>
            {/* Loading indicator */}
            {pdfLoading && !imageError && (
              <div className="absolute inset-0 flex items-center justify-center bg-white z-10">
                <div className="text-center">
                  <Spin size="large" />
                  <p className="mt-4 text-gray-600 text-lg">ƒêang t·∫£i PDF...</p>
                  <p className="text-sm text-gray-500">Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
                </div>
              </div>
            )}
            
            {/* Ch·ªâ s·ª≠ d·ª•ng Google Docs Viewer */}
            <iframe
              key={visible ? 'pdf-frame' : 'hidden'} // Force re-render khi m·ªü l·∫°i
              src={viewerUrl}
              title={`H·ª£p ƒë·ªìng ${contractNo}`}
              style={{ 
                width: '100%', 
                height: '85vh',
                minWidth: '800px',
                border: 'none',
                display: 'block',
                opacity: pdfLoading ? 0 : 1,
                transition: 'opacity 0.3s ease'
              }}
              onError={() => {
                console.error('PDF iframe load error');
                setImageError(true);
                setPdfLoading(false);
              }}
              onLoad={() => {
                console.log('PDF iframe loaded successfully');
                setImageError(false);
                // Delay m·ªôt ch√∫t ƒë·ªÉ Google Docs Viewer render content
                setTimeout(() => {
                  setPdfLoading(false);
                }, 1500);
              }}
            />
            
            {/* Fallback n·∫øu Google Docs Viewer kh√¥ng t·∫£i ƒë∆∞·ª£c */}
            {imageError && (
              <div className="p-8 text-center text-gray-600 bg-white">
                <FilePdfOutlined className="text-4xl text-red-500 mb-4" />
                <p className="text-lg mb-4">Kh√¥ng th·ªÉ hi·ªÉn th·ªã PDF qua Google Docs Viewer</p>
                <Button 
                  type="primary" 
                  icon={<FilePdfOutlined />}
                  href={contractLink} 
                  target="_blank"
                  className="bg-blue-500 border-blue-500"
                >
                  M·ªü trong tab m·ªõi
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng - Acrobat style */}
      <div className="text-center text-gray-300 text-xs py-2" style={{ backgroundColor: '#525659' }}>
        <p>üí° PDF Viewer - S·ª≠ d·ª•ng scroll ƒë·ªÉ xem to√†n b·ªô t√†i li·ªáu</p>
      </div>
    </Modal>
  );
};

// Component modal th√™m SmartCA
const SmartCAModal = ({ visible, onCancel, onSubmit, loading, contractService }) => {
  const [form] = Form.useForm();

  const handleSubmit = (values) => {
    onSubmit(values);
  };

  return (
    <Modal
      title={
        <span className="flex items-center">
          <SafetyOutlined className="text-green-500 mr-2" />
          Th√™m SmartCA
        </span>
      }
      open={visible}
      onCancel={onCancel}
      footer={null}
      destroyOnClose={true}
    >
      <Alert
        message="Th√™m SmartCA ƒë·ªÉ k√Ω h·ª£p ƒë·ªìng"
        description="Nh·∫≠p s·ªë CCCD ƒë·ªÉ th√™m SmartCA. Serial number l√† t√πy ch·ªçn."
        type="info"
        className="mb-4"
      />

      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
        autoComplete="off"
      >
        <Form.Item
          name="cccd"
          label="S·ªë CCCD/CMND"
          rules={[
            { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë CCCD!' },
            { 
              validator: (_, value) => {
                if (!value) return Promise.resolve();
                const validation = contractService.validateCCCD(value);
                return validation.valid ? Promise.resolve() : Promise.reject(new Error(validation.message));
              }
            }
          ]}
        >
          <Input
            placeholder="Nh·∫≠p s·ªë CCCD (12 s·ªë)"
            prefix={<IdcardOutlined className="text-gray-400" />}
            maxLength={12}
          />
        </Form.Item>

        <Form.Item
          name="serialNumber"
          label="Serial Number (t√πy ch·ªçn)"
        >
          <Input
            placeholder="Nh·∫≠p serial number n·∫øu c√≥"
            prefix={<SafetyOutlined className="text-gray-400" />}
          />
        </Form.Item>

        <Form.Item className="mb-0">
          <Space className="w-full flex justify-end">
            <Button onClick={onCancel}>
              H·ªßy
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              className="bg-green-500 hover:bg-green-600 border-green-500"
            >
              {loading ? 'ƒêang th√™m...' : 'Th√™m SmartCA'}
            </Button>
          </Space>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default ContractPage;
